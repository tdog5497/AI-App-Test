import os
import logging
import base64
import json
from fastapi import FastAPI, Request, File, UploadFile, Form, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import List, Optional, Dict

from utils.openai_utils import generate_summary, generate_flashcards, answer_question, check_api_key
from utils.pdf_utils import extract_text_from_pdf
from utils.data_store import DataStore
from openai import APIError, RateLimitError, AuthenticationError

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(title="AI Study Assistant")

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Setup templates
templates = Jinja2Templates(directory="templates")

# Initialize data store for in-memory storage
data_store = DataStore()

# Check if API key is available and valid
openai_api_status = "valid"
openai_error_message = None

try:
    # Use test_with_api_call=True to actually verify the key works and has quota
    check_api_key(test_with_api_call=True)
    logger.info("OpenAI API key verified successfully.")
except AuthenticationError as e:
    openai_api_status = "invalid"
    openai_error_message = "Invalid OpenAI API key. AI features will not work."
    logger.error(f"OpenAI API authentication error: {str(e)}")
except RateLimitError as e:
    openai_api_status = "rate_limited"
    openai_error_message = "OpenAI API quota exceeded. AI features will not work until quota is refreshed."
    logger.error(f"OpenAI API rate limit error: {str(e)}")
except Exception as e:
    openai_api_status = "error"
    openai_error_message = f"Error connecting to OpenAI API: {str(e)}"
    logger.error(f"OpenAI API error: {str(e)}")

class TextData(BaseModel):
    text: str

class QuestionData(BaseModel):
    question: str
    context: Optional[str] = None

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {
        "request": request,
        "openai_api_status": openai_api_status,
